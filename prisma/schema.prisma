// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  id             String         @id @default(uuid())
  email          String         @unique
  refreshToken   String[]
  accessToken    String?
  organizationId String?
  password       String?
  token          String?
  provider       String?
  username       String?
  confirmedAt    DateTime?
  profile        Profile?
  organization   Organization?
  contributors   Contributor[]
  authProviders  AuthProvider[]
}

model Contributor {
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  deletedAt      DateTime?
  id             String              @id @default(uuid())
  role           RoleContributorRole @default(SUPERADMIN)
  userId         String
  user           User                @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

enum RoleContributorRole {
  SUPERADMIN
  ADMIN
}

model Profile {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  id          String    @id @default(uuid())
  firstName   String
  lastName    String?
  address     String?
  phone       String?
  image       String?
  fiscalCode  String?
  color       String?
  url         String?
  description String?
  birthday    DateTime?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  id           String        @id @default(uuid())
  name         String?
  description  String?
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  contributors Contributor[]
}

model AuthProvider {
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  id         String    @id @default(uuid())
  email      String?
  name       String?
  providerId String?
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
